import { useDownload } from "@heart-re-up/react-lib/hooks/useDownload";
import { Badge, Button, Card, Flex, Text, TextField } from "@radix-ui/themes";
import { useRef, useState } from "react";
import {
  drawChartImage,
  drawGradientImage,
  drawPatternImage,
  drawQRImage,
} from "./drawImage";

export default function DemoImage() {
  const [filename, setFilename] = useState("generated-image.png");
  const [downloadStatus, setDownloadStatus] = useState<string>("");
  const canvasRef = useRef<HTMLCanvasElement>(null);

  const { download } = useDownload();

  const generateAndDrawImage = (
    type: "gradient" | "chart" | "pattern" | "qr"
  ) => {
    const canvas = canvasRef.current;
    if (!canvas) {
      console.warn("canvas is not found");
      return;
    }
    switch (type) {
      case "gradient":
        drawGradientImage(canvas);
        break;
      case "chart":
        drawChartImage(canvas);
        break;
      case "pattern":
        drawPatternImage(canvas);
        break;
      case "qr":
        drawQRImage(canvas);
        break;
    }
  };

  const handleDownloadCanvas = async () => {
    const canvas = canvasRef.current;
    if (!canvas) {
      console.warn("canvas is not found");
      return;
    }

    canvas.toBlob(async (blob) => {
      if (blob) {
        const success = await download(blob, { filename });
        setDownloadStatus(success ? "이미지 다운로드 성공!" : "다운로드 실패");
        setTimeout(() => setDownloadStatus(""), 3000);
      }
    }, "image/png");
  };

  const downloadSVGImage = async () => {
    const svg = `
      <svg width="300" height="200" xmlns="http://www.w3.org/2000/svg">
        <defs>
          <linearGradient id="bg" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" style="stop-color:#667eea;stop-opacity:1" />
            <stop offset="100%" style="stop-color:#764ba2;stop-opacity:1" />
          </linearGradient>
        </defs>
        <rect width="300" height="200" fill="url(#bg)" rx="15"/>
        <text x="150" y="80" font-family="Arial" font-size="24" font-weight="bold" 
              fill="white" text-anchor="middle">SVG Image</text>
        <text x="150" y="110" font-family="Arial" font-size="16" 
              fill="rgba(255,255,255,0.8)" text-anchor="middle">Generated by useDownload</text>
        <circle cx="150" cy="140" r="20" fill="rgba(255,255,255,0.3)"/>
        <rect x="130" y="160" width="40" height="20" fill="rgba(255,255,255,0.2)" rx="10"/>
      </svg>
    `;

    const blob = new Blob([svg], { type: "image/svg+xml" });
    const success = await download(blob, {
      filename: filename.replace(".png", ".svg"),
    });

    setDownloadStatus(success ? "SVG 다운로드 성공!" : "다운로드 실패");
    setTimeout(() => setDownloadStatus(""), 3000);
  };

  // 컴포넌트 마운트 시 기본 이미지 생성
  useState(() => {
    const canvas = canvasRef.current;
    if (!canvas) {
      console.warn("canvas is not found");
      return;
    }
    setTimeout(() => drawGradientImage(canvas), 1000);
  });

  return (
    <Card>
      <Flex direction="column" gap="4">
        <Text size="4" weight="bold">
          이미지 파일 다운로드
        </Text>

        <Text size="2" color="gray">
          Canvas나 SVG로 생성된 이미지를 파일로 다운로드할 수 있습니다.
        </Text>

        <Flex direction="column" gap="3">
          <Flex direction="column" gap="2">
            <Text size="2" weight="medium">
              파일명:
            </Text>
            <TextField.Root
              value={filename}
              onChange={(e) => setFilename(e.target.value)}
              placeholder="다운로드할 파일명을 입력하세요..."
            />
          </Flex>

          <Flex direction="column" gap="2" align="center">
            <canvas
              ref={canvasRef}
              style={{
                border: "2px solid var(--gray-6)",
                borderRadius: "8px",
                maxWidth: "100%",
                height: "auto",
              }}
            />

            <Flex gap="2" wrap="wrap" justify="center">
              <Button
                variant="soft"
                size="1"
                onClick={() => generateAndDrawImage("gradient")}
              >
                그라디언트
              </Button>
              <Button
                variant="soft"
                size="1"
                onClick={() => generateAndDrawImage("chart")}
              >
                차트
              </Button>
              <Button
                variant="soft"
                size="1"
                onClick={() => generateAndDrawImage("pattern")}
              >
                패턴
              </Button>
              <Button
                variant="soft"
                size="1"
                onClick={() => generateAndDrawImage("qr")}
              >
                QR 스타일
              </Button>
            </Flex>

            <Flex gap="2" align="center" wrap="wrap">
              <Button onClick={handleDownloadCanvas}>PNG 다운로드</Button>
              <Button onClick={downloadSVGImage} variant="soft">
                SVG 다운로드
              </Button>

              {downloadStatus && (
                <Badge
                  color={downloadStatus.includes("성공") ? "green" : "red"}
                >
                  {downloadStatus}
                </Badge>
              )}
            </Flex>
          </Flex>

          <Card variant="surface">
            <Flex direction="column" gap="2">
              <Text size="2" weight="medium">
                💡 사용 방법:
              </Text>
              <Text size="2" color="gray">
                1. 위의 버튼들로 다양한 이미지를 생성해보세요
              </Text>
              <Text size="2" color="gray">
                2. 원하는 파일명을 입력하세요 (.png 또는 .svg)
              </Text>
              <Text size="2" color="gray">
                3. "PNG 다운로드" 또는 "SVG 다운로드" 버튼을 클릭하세요
              </Text>
              <Text size="2" color="gray">
                4. 브라우저의 다운로드 폴더에서 파일을 확인하세요
              </Text>
            </Flex>
          </Card>
        </Flex>
      </Flex>
    </Card>
  );
}
